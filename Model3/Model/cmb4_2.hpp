
// Code generated by stanc v2.31.0
#include <stan/model/model_header.hpp>
namespace cmb4_2_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 80> locations_array__ = 
{" (found before start of program)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 89, column 2 to column 10)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 92, column 2 to column 11)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 93, column 2 to column 10)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 99, column 0 to column 23)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 101, column 0 to column 18)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 103, column 0 to column 19)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 105, column 0 to column 24)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 109, column 2 to column 25)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 110, column 2 to column 24)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 113, column 2 to column 80)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 116, column 2 to column 75)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 117, column 2 to column 50)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 118, column 2 to column 97)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 121, column 2 to column 74)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 125, column 2 to column 16)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 126, column 2 to column 95)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 127, column 2 to column 16)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 128, column 2 to column 17)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 132, column 2 to column 23)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 136, column 2 to column 86)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 139, column 2 to column 29)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 140, column 2 to column 43)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 141, column 2 to column 24)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 144, column 2 to column 55)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 133, column 2 to column 66)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 150, column 2 to column 22)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 151, column 2 to column 24)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 152, column 2 to column 22)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 155, column 2 to column 23)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 64, column 2 to column 13)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 65, column 2 to column 15)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 66, column 2 to column 14)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 67, column 2 to column 16)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 68, column 2 to column 14)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 69, column 2 to column 16)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 75, column 2 to column 20)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 76, column 2 to column 19)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 80, column 2 to column 19)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 81, column 2 to column 28)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 81, column 29 to column 57)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 81, column 58 to column 84)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 82, column 2 to column 28)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 82, column 29 to column 57)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 82, column 58 to column 86)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 83, column 2 to column 28)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 83, column 29 to column 57)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 83, column 58 to column 88)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 132, column 8 to column 9)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 6, column 4 to column 28)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 7, column 4 to column 28)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 8, column 4 to column 28)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 9, column 4 to column 27)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 10, column 4 to column 26)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 12, column 4 to column 18)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 13, column 4 to column 21)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 16, column 4 to column 21)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 19, column 4 to column 18)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 21, column 4 to column 48)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 22, column 4 to column 61)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 23, column 4 to column 23)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 25, column 4 to column 27)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 27, column 4 to column 15)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 5, column 68 to line 28, column 3)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 34, column 3 to column 21)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 35, column 3 to column 27)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 37, column 3 to column 22)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 38, column 3 to column 48)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 40, column 3 to column 31)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 33, column 37 to line 41, column 3)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 45, column 4 to column 28)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 46, column 4 to column 28)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 47, column 4 to column 28)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 48, column 4 to column 27)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 50, column 4 to column 60)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 51, column 4 to column 78)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 53, column 4 to column 13)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 44, column 50 to line 54, column 3)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 58, column 4 to column 52)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cmb4_2.stan', line 57, column 89 to line 59, column 3)"};

struct Ehighredshifts_functor__ {
  template <typename T0__, typename T1__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_stan_scalar<T1__>>* = nullptr>
  stan::promote_args_t<T0__, T1__>
  operator()(const T0__& z, const std::vector<T1__>& theta,
             std::ostream* pstream__) const;
};
struct daesystem_variadic3_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_col_vector<T1__>,
                                stan::is_vt_not_complex<T1__>,
                                stan::is_col_vector<T2__>,
                                stan::is_vt_not_complex<T2__>,
                                stan::is_stan_scalar<T3__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>, stan::base_type_t<T2__>,
                       T3__>, -1, 1>
  operator()(const T0__& z, const T1__& y, const T2__& dy,
             std::ostream* pstream__, const std::vector<T3__>& theta) const;
};
struct f_functor__ {
  template <typename T0__, typename T1__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_stan_scalar<T1__>>* = nullptr>
  stan::promote_args_t<T0__, T1__>
  operator()(const T0__& z, const std::vector<T1__>& theta,
             std::ostream* pstream__) const;
};
struct daesystem_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_col_vector<T1__>,
                                stan::is_vt_not_complex<T1__>,
                                stan::is_col_vector<T2__>,
                                stan::is_vt_not_complex<T2__>,
                                stan::is_stan_scalar<T3__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>, stan::base_type_t<T2__>,
                       T3__>, -1, 1>
  operator()(const T0__& z, const T1__& y, const T2__& dy,
             const std::vector<T3__>& theta, std::ostream* pstream__) const;
};
struct integrand_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_stan_scalar<T1__>,
                                stan::is_stan_scalar<T2__>,
                                stan::is_stan_scalar<T3__>>* = nullptr>
  stan::promote_args_t<T0__, T1__, T2__, T3__>
  operator()(const T0__& x, const T1__& xc, const std::vector<T2__>& theta,
             const std::vector<T3__>& x_r, const std::vector<int>& x_i,
             std::ostream* pstream__) const;
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_stan_scalar<T3__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>, stan::base_type_t<T2__>,
                     T3__>, -1, 1>
  daesystem(const T0__& z, const T1__& y_arg__, const T2__& dy_arg__,
            const std::vector<T3__>& theta, std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<T0__, stan::base_type_t<T1__>,
                                 stan::base_type_t<T2__>, T3__>;
    int current_statement__ = 0; 
    const auto& y = stan::math::to_ref(y_arg__);
    const auto& dy = stan::math::to_ref(dy_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ Omega_b = DUMMY_VAR__;
      current_statement__ = 49;
      Omega_b = stan::model::rvalue(theta, "theta",
                  stan::model::index_uni(2));
      local_scalar_t__ Omega_c = DUMMY_VAR__;
      current_statement__ = 50;
      Omega_c = stan::model::rvalue(theta, "theta",
                  stan::model::index_uni(3));
      local_scalar_t__ Omega_r = DUMMY_VAR__;
      current_statement__ = 51;
      Omega_r = stan::model::rvalue(theta, "theta",
                  stan::model::index_uni(4));
      local_scalar_t__ lambda = DUMMY_VAR__;
      current_statement__ = 52;
      lambda = stan::model::rvalue(theta, "theta", stan::model::index_uni(5));
      local_scalar_t__ zstar = DUMMY_VAR__;
      current_statement__ = 53;
      zstar = stan::model::rvalue(theta, "theta", stan::model::index_uni(6));
      local_scalar_t__ E = DUMMY_VAR__;
      current_statement__ = 54;
      E = stan::model::rvalue(y, "y", stan::model::index_uni(1));
      local_scalar_t__ dy2 = DUMMY_VAR__;
      current_statement__ = 55;
      dy2 = stan::model::rvalue(dy, "dy", stan::model::index_uni(2));
      local_scalar_t__ x = DUMMY_VAR__;
      current_statement__ = 56;
      x = (zstar * z);
      Eigen::Matrix<local_scalar_t__, -1, 1> res =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__);
      local_scalar_t__ lhs = DUMMY_VAR__;
      current_statement__ = 58;
      lhs = ((stan::math::pow(E, 2) - (2 * lambda)) *
              stan::math::exp((lambda / stan::math::pow(E, 2))));
      local_scalar_t__ rhs = DUMMY_VAR__;
      current_statement__ = 59;
      rhs = (((Omega_b + Omega_c) * stan::math::pow((1 + x), 3)) +
              (Omega_r * stan::math::pow((1 + x), 4)));
      current_statement__ = 60;
      stan::model::assign(res, (rhs - lhs),
        "assigning variable res", stan::model::index_uni(1));
      current_statement__ = 61;
      stan::model::assign(res, ((zstar / E) - dy2),
        "assigning variable res", stan::model::index_uni(2));
      current_statement__ = 62;
      return res;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>>* = nullptr>
  stan::promote_args_t<T0__, T1__>
  f(const T0__& z, const std::vector<T1__>& theta, std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ h = DUMMY_VAR__;
      current_statement__ = 64;
      h = stan::model::rvalue(theta, "theta", stan::model::index_uni(1));
      local_scalar_t__ Omega_b = DUMMY_VAR__;
      current_statement__ = 65;
      Omega_b = stan::model::rvalue(theta, "theta",
                  stan::model::index_uni(2));
      local_scalar_t__ Tcmb = DUMMY_VAR__;
      current_statement__ = 66;
      Tcmb = 2.7255;
      local_scalar_t__ Rb = DUMMY_VAR__;
      current_statement__ = 67;
      Rb = (((31500 * Omega_b) * stan::math::pow(h, 2)) *
             stan::math::pow((2.7 / Tcmb), 4));
      current_statement__ = 68;
      return stan::math::pow((3 * (1 + (Rb / (1 + z)))), 0.5);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>>* = nullptr>
  stan::promote_args_t<T0__, T1__>
  Ehighredshifts(const T0__& z, const std::vector<T1__>& theta,
                 std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ Omega_b = DUMMY_VAR__;
      current_statement__ = 70;
      Omega_b = stan::model::rvalue(theta, "theta",
                  stan::model::index_uni(2));
      local_scalar_t__ Omega_c = DUMMY_VAR__;
      current_statement__ = 71;
      Omega_c = stan::model::rvalue(theta, "theta",
                  stan::model::index_uni(3));
      local_scalar_t__ Omega_r = DUMMY_VAR__;
      current_statement__ = 72;
      Omega_r = stan::model::rvalue(theta, "theta",
                  stan::model::index_uni(4));
      local_scalar_t__ lambda = DUMMY_VAR__;
      current_statement__ = 73;
      lambda = stan::model::rvalue(theta, "theta", stan::model::index_uni(5));
      local_scalar_t__ fz = DUMMY_VAR__;
      current_statement__ = 74;
      fz = (((Omega_b + Omega_c) * stan::math::pow((1 + z), 3)) +
             (Omega_r * stan::math::pow((1 + z), 4)));
      local_scalar_t__ E = DUMMY_VAR__;
      current_statement__ = 75;
      E = stan::math::sqrt(
            (((fz + lambda) +
               stan::math::sqrt(
                 ((stan::math::pow(fz, 2) + ((2 * fz) * lambda)) +
                   (9 * stan::math::pow(lambda, 2))))) / 2));
      current_statement__ = 76;
      return E;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>* = nullptr>
  stan::promote_args_t<T0__, T1__, T2__, T3__>
  integrand(const T0__& x, const T1__& xc, const std::vector<T2__>& theta,
            const std::vector<T3__>& x_r, const std::vector<int>& x_i,
            std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      current_statement__ = 78;
      return (1 /
               (Ehighredshifts(x, theta, pstream__) * f(x, theta, pstream__)));
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>>*>
stan::promote_args_t<T0__, T1__>
Ehighredshifts_functor__::operator()(const T0__& z,
                                     const std::vector<T1__>& theta,
                                     std::ostream* pstream__)  const
{
  return Ehighredshifts(z, theta, pstream__);
}

template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_stan_scalar<T3__>>*>
Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>, stan::base_type_t<T2__>,
                     T3__>, -1, 1>
daesystem_variadic3_functor__::operator()(const T0__& z, const T1__& y,
                                          const T2__& dy,
                                          std::ostream* pstream__,
                                          const std::vector<T3__>& theta) 
const
{
  return daesystem(z, y, dy, theta, pstream__);
}

template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>>*>
stan::promote_args_t<T0__, T1__>
f_functor__::operator()(const T0__& z, const std::vector<T1__>& theta,
                        std::ostream* pstream__)  const
{
  return f(z, theta, pstream__);
}

template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_stan_scalar<T3__>>*>
Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>, stan::base_type_t<T2__>,
                     T3__>, -1, 1>
daesystem_functor__::operator()(const T0__& z, const T1__& y, const T2__& dy,
                                const std::vector<T3__>& theta,
                                std::ostream* pstream__)  const
{
  return daesystem(z, y, dy, theta, pstream__);
}

template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>*>
stan::promote_args_t<T0__, T1__, T2__, T3__>
integrand_functor__::operator()(const T0__& x, const T1__& xc,
                                const std::vector<T2__>& theta,
                                const std::vector<T3__>& x_r,
                                const std::vector<int>& x_i,
                                std::ostream* pstream__)  const
{
  return integrand(x, xc, theta, x_r, x_i, pstream__);
}

 class cmb4_2_model final : public model_base_crtp<cmb4_2_model> {

 private:
  double R_exp;
  double R_error;
  double wb_exp;
  double wb_error;
  double la_exp;
  double la_error;
  std::vector<double> x_r;
  std::vector<int> x_i;
  Eigen::Matrix<double, -1, -1> Cinv_data__; 
  Eigen::Map<Eigen::Matrix<double, -1, -1>> Cinv{nullptr, 0, 0};
 
 public:
  ~cmb4_2_model() { }
  
  inline std::string model_name() const final { return "cmb4_2_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.31.0", "stancflags = "};
  }
  
  
  cmb4_2_model(stan::io::var_context& context__,
               unsigned int random_seed__ = 0,
               std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "cmb4_2_model_namespace::cmb4_2_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 30;
      context__.validate_dims("data initialization","R_exp","double",
           std::vector<size_t>{});
      R_exp = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 30;
      R_exp = context__.vals_r("R_exp")[(1 - 1)];
      current_statement__ = 31;
      context__.validate_dims("data initialization","R_error","double",
           std::vector<size_t>{});
      R_error = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 31;
      R_error = context__.vals_r("R_error")[(1 - 1)];
      current_statement__ = 32;
      context__.validate_dims("data initialization","wb_exp","double",
           std::vector<size_t>{});
      wb_exp = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 32;
      wb_exp = context__.vals_r("wb_exp")[(1 - 1)];
      current_statement__ = 33;
      context__.validate_dims("data initialization","wb_error","double",
           std::vector<size_t>{});
      wb_error = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 33;
      wb_error = context__.vals_r("wb_error")[(1 - 1)];
      current_statement__ = 34;
      context__.validate_dims("data initialization","la_exp","double",
           std::vector<size_t>{});
      la_exp = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 34;
      la_exp = context__.vals_r("la_exp")[(1 - 1)];
      current_statement__ = 35;
      context__.validate_dims("data initialization","la_error","double",
           std::vector<size_t>{});
      la_error = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 35;
      la_error = context__.vals_r("la_error")[(1 - 1)];
      current_statement__ = 36;
      x_r = std::vector<double>(0, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 37;
      x_i = std::vector<int>(0, std::numeric_limits<int>::min());
      
      
      current_statement__ = 38;
      Cinv_data__ = 
        Eigen::Matrix<double, -1, -1>::Constant(3, 3,
          std::numeric_limits<double>::quiet_NaN());
      new (&Cinv) Eigen::Map<Eigen::Matrix<double, -1, -1>>(Cinv_data__.data(), 3, 3);
        
      
      current_statement__ = 39;
      stan::model::assign(Cinv, 70.41272413,
        "assigning variable Cinv", stan::model::index_uni(1),
                                     stan::model::index_uni(1));
      current_statement__ = 40;
      stan::model::assign(Cinv, -472.33176518,
        "assigning variable Cinv", stan::model::index_uni(1),
                                     stan::model::index_uni(2));
      current_statement__ = 41;
      stan::model::assign(Cinv, 4150.71131541,
        "assigning variable Cinv", stan::model::index_uni(1),
                                     stan::model::index_uni(3));
      current_statement__ = 42;
      stan::model::assign(Cinv, -472.33176518,
        "assigning variable Cinv", stan::model::index_uni(2),
                                     stan::model::index_uni(1));
      current_statement__ = 43;
      stan::model::assign(Cinv, 31027.46200904,
        "assigning variable Cinv", stan::model::index_uni(2),
                                     stan::model::index_uni(2));
      current_statement__ = 44;
      stan::model::assign(Cinv, 477813.59257032,
        "assigning variable Cinv", stan::model::index_uni(2),
                                     stan::model::index_uni(3));
      current_statement__ = 45;
      stan::model::assign(Cinv, 4150.71131541,
        "assigning variable Cinv", stan::model::index_uni(3),
                                     stan::model::index_uni(1));
      current_statement__ = 46;
      stan::model::assign(Cinv, 477813.59257032,
        "assigning variable Cinv", stan::model::index_uni(3),
                                     stan::model::index_uni(2));
      current_statement__ = 47;
      stan::model::assign(Cinv, 30083780.34236922,
        "assigning variable Cinv", stan::model::index_uni(3),
                                     stan::model::index_uni(3));
      current_statement__ = 48;
      stan::math::validate_non_negative_index("S", "1", 1);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "cmb4_2_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ H0 = DUMMY_VAR__;
      current_statement__ = 1;
      H0 = in__.template read<local_scalar_t__>();
      local_scalar_t__ Omb = DUMMY_VAR__;
      current_statement__ = 2;
      Omb = in__.template read<local_scalar_t__>();
      local_scalar_t__ Om = DUMMY_VAR__;
      current_statement__ = 3;
      Om = in__.template read<local_scalar_t__>();
      local_scalar_t__ c = DUMMY_VAR__;
      current_statement__ = 4;
      c = (2.9979 * stan::math::pow(10, 5));
      local_scalar_t__ h = DUMMY_VAR__;
      current_statement__ = 5;
      h = (H0 / 100.0);
      local_scalar_t__ Omega_b = DUMMY_VAR__;
      current_statement__ = 6;
      Omega_b = Omb;
      local_scalar_t__ Omega_c = DUMMY_VAR__;
      current_statement__ = 7;
      Omega_c = (Om - Omb);
      local_scalar_t__ wr = DUMMY_VAR__;
      current_statement__ = 8;
      wr = (4.15 * stan::math::pow(10, -5));
      local_scalar_t__ Omega_r = DUMMY_VAR__;
      current_statement__ = 9;
      Omega_r = (wr / stan::math::pow(h, 2));
      local_scalar_t__ lambda = DUMMY_VAR__;
      current_statement__ = 10;
      lambda = (0.5 +
                 stan::math::lambert_w0(
                   (-((Omega_b + Omega_c) + Omega_r) /
                     (2 * stan::math::exp(0.5)))));
      local_scalar_t__ g1 = DUMMY_VAR__;
      current_statement__ = 11;
      g1 = ((0.0783 *
              stan::math::pow((Omega_b * stan::math::pow(h, 2)), -0.238)) /
             (1 +
               (39.5 *
                 stan::math::pow((Omega_b * stan::math::pow(h, 2)), 0.763))));
      local_scalar_t__ g2 = DUMMY_VAR__;
      current_statement__ = 12;
      g2 = (0.560 /
             (1 +
               (21.1 *
                 stan::math::pow((Omega_b * stan::math::pow(h, 2)), 1.81))));
      local_scalar_t__ zstar = DUMMY_VAR__;
      current_statement__ = 13;
      zstar = ((1048 *
                 (1 +
                   (0.00124 *
                     stan::math::pow((Omega_b * stan::math::pow(h, 2)),
                       -0.738)))) *
                (1 +
                  (g1 *
                    stan::math::pow(
                      ((Omega_b + Omega_c) * stan::math::pow(h, 2)), g2))));
      std::vector<local_scalar_t__> faketheta =
         std::vector<local_scalar_t__>(6, DUMMY_VAR__);
      current_statement__ = 14;
      stan::model::assign(faketheta, std::vector<local_scalar_t__>{h,
        Omega_b, Omega_c, Omega_r, lambda, zstar},
        "assigning variable faketheta");
      local_scalar_t__ y1 = DUMMY_VAR__;
      current_statement__ = 15;
      y1 = 1.0;
      local_scalar_t__ dy1 = DUMMY_VAR__;
      current_statement__ = 16;
      dy1 = (((1 / (2 * stan::math::exp(lambda))) *
               ((3 * (Omega_b + Omega_c)) + (4 * Omega_r))) /
              ((1 - lambda) + (2 * stan::math::pow(lambda, 2))));
      local_scalar_t__ y2 = DUMMY_VAR__;
      current_statement__ = 17;
      y2 = 0.0;
      local_scalar_t__ dy2 = DUMMY_VAR__;
      current_statement__ = 18;
      dy2 = 1.0;
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> S =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(1, 
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__));
      current_statement__ = 25;
      stan::model::assign(S,
        stan::math::dae(daesystem_variadic3_functor__(),
          (Eigen::Matrix<local_scalar_t__,-1,1>(2) << y1, y2).finished(),
          (Eigen::Matrix<local_scalar_t__,-1,1>(2) << dy1, dy2).finished(),
          0.0, std::vector<double>{1}, pstream__, faketheta),
        "assigning variable S");
      local_scalar_t__ sol = DUMMY_VAR__;
      current_statement__ = 20;
      sol = stan::math::integrate_1d(integrand_functor__(), zstar,
              stan::math::positive_infinity(), faketheta, x_r, x_i,
              pstream__);
      local_scalar_t__ la = DUMMY_VAR__;
      current_statement__ = 21;
      la = ((stan::math::pi() *
              stan::model::rvalue(
                stan::model::rvalue(S, "S", stan::model::index_uni(1)),
                "S[1]", stan::model::index_uni(2))) / sol);
      local_scalar_t__ R = DUMMY_VAR__;
      current_statement__ = 22;
      R = (stan::math::sqrt((Omega_b + Omega_c)) *
            stan::model::rvalue(
              stan::model::rvalue(S, "S", stan::model::index_uni(1)), "S[1]",
              stan::model::index_uni(2)));
      local_scalar_t__ wb = DUMMY_VAR__;
      current_statement__ = 23;
      wb = (Omega_b * stan::math::pow(h, 2));
      Eigen::Matrix<local_scalar_t__, -1, 1> x =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(3, DUMMY_VAR__);
      current_statement__ = 24;
      stan::model::assign(x, (Eigen::Matrix<local_scalar_t__,-1,1>(3) <<
        (la - la_exp), (R - R_exp), (wb - wb_exp)).finished(),
        "assigning variable x");
      {
        current_statement__ = 26;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(H0, 70, 10));
        current_statement__ = 27;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(Omb, 0.05, 1));
        current_statement__ = 28;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(Om, 0.3, 1));
        current_statement__ = 29;
        lp_accum__.add(
          stan::math::multiply(
            stan::math::multiply(stan::math::minus(stan::math::transpose(x)),
              Cinv), x));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "cmb4_2_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double H0 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      H0 = in__.template read<local_scalar_t__>();
      double Omb = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      Omb = in__.template read<local_scalar_t__>();
      double Om = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      Om = in__.template read<local_scalar_t__>();
      double c = std::numeric_limits<double>::quiet_NaN();
      double h = std::numeric_limits<double>::quiet_NaN();
      double Omega_b = std::numeric_limits<double>::quiet_NaN();
      double Omega_c = std::numeric_limits<double>::quiet_NaN();
      double wr = std::numeric_limits<double>::quiet_NaN();
      double Omega_r = std::numeric_limits<double>::quiet_NaN();
      double lambda = std::numeric_limits<double>::quiet_NaN();
      double g1 = std::numeric_limits<double>::quiet_NaN();
      double g2 = std::numeric_limits<double>::quiet_NaN();
      double zstar = std::numeric_limits<double>::quiet_NaN();
      std::vector<double> faketheta =
         std::vector<double>(6, std::numeric_limits<double>::quiet_NaN());
      double y1 = std::numeric_limits<double>::quiet_NaN();
      double dy1 = std::numeric_limits<double>::quiet_NaN();
      double y2 = std::numeric_limits<double>::quiet_NaN();
      double dy2 = std::numeric_limits<double>::quiet_NaN();
      std::vector<Eigen::Matrix<double, -1, 1>> S =
         std::vector<Eigen::Matrix<double, -1, 1>>(1, 
           Eigen::Matrix<double, -1, 1>::Constant(2,
             std::numeric_limits<double>::quiet_NaN()));
      double sol = std::numeric_limits<double>::quiet_NaN();
      double la = std::numeric_limits<double>::quiet_NaN();
      double R = std::numeric_limits<double>::quiet_NaN();
      double wb = std::numeric_limits<double>::quiet_NaN();
      Eigen::Matrix<double, -1, 1> x =
         Eigen::Matrix<double, -1, 1>::Constant(3,
           std::numeric_limits<double>::quiet_NaN());
      out__.write(H0);
      out__.write(Omb);
      out__.write(Om);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 4;
      c = (2.9979 * stan::math::pow(10, 5));
      current_statement__ = 5;
      h = (H0 / 100.0);
      current_statement__ = 6;
      Omega_b = Omb;
      current_statement__ = 7;
      Omega_c = (Om - Omb);
      current_statement__ = 8;
      wr = (4.15 * stan::math::pow(10, -5));
      current_statement__ = 9;
      Omega_r = (wr / stan::math::pow(h, 2));
      current_statement__ = 10;
      lambda = (0.5 +
                 stan::math::lambert_w0(
                   (-((Omega_b + Omega_c) + Omega_r) /
                     (2 * stan::math::exp(0.5)))));
      current_statement__ = 11;
      g1 = ((0.0783 *
              stan::math::pow((Omega_b * stan::math::pow(h, 2)), -0.238)) /
             (1 +
               (39.5 *
                 stan::math::pow((Omega_b * stan::math::pow(h, 2)), 0.763))));
      current_statement__ = 12;
      g2 = (0.560 /
             (1 +
               (21.1 *
                 stan::math::pow((Omega_b * stan::math::pow(h, 2)), 1.81))));
      current_statement__ = 13;
      zstar = ((1048 *
                 (1 +
                   (0.00124 *
                     stan::math::pow((Omega_b * stan::math::pow(h, 2)),
                       -0.738)))) *
                (1 +
                  (g1 *
                    stan::math::pow(
                      ((Omega_b + Omega_c) * stan::math::pow(h, 2)), g2))));
      current_statement__ = 14;
      stan::model::assign(faketheta, std::vector<local_scalar_t__>{h,
        Omega_b, Omega_c, Omega_r, lambda, zstar},
        "assigning variable faketheta");
      current_statement__ = 15;
      y1 = 1.0;
      current_statement__ = 16;
      dy1 = (((1 / (2 * stan::math::exp(lambda))) *
               ((3 * (Omega_b + Omega_c)) + (4 * Omega_r))) /
              ((1 - lambda) + (2 * stan::math::pow(lambda, 2))));
      current_statement__ = 17;
      y2 = 0.0;
      current_statement__ = 18;
      dy2 = 1.0;
      current_statement__ = 25;
      stan::model::assign(S,
        stan::math::dae(daesystem_variadic3_functor__(),
          (Eigen::Matrix<local_scalar_t__,-1,1>(2) << y1, y2).finished(),
          (Eigen::Matrix<local_scalar_t__,-1,1>(2) << dy1, dy2).finished(),
          0.0, std::vector<double>{1}, pstream__, faketheta),
        "assigning variable S");
      current_statement__ = 20;
      sol = stan::math::integrate_1d(integrand_functor__(), zstar,
              stan::math::positive_infinity(), faketheta, x_r, x_i,
              pstream__);
      current_statement__ = 21;
      la = ((stan::math::pi() *
              stan::model::rvalue(
                stan::model::rvalue(S, "S", stan::model::index_uni(1)),
                "S[1]", stan::model::index_uni(2))) / sol);
      current_statement__ = 22;
      R = (stan::math::sqrt((Omega_b + Omega_c)) *
            stan::model::rvalue(
              stan::model::rvalue(S, "S", stan::model::index_uni(1)), "S[1]",
              stan::model::index_uni(2)));
      current_statement__ = 23;
      wb = (Omega_b * stan::math::pow(h, 2));
      current_statement__ = 24;
      stan::model::assign(x, (Eigen::Matrix<local_scalar_t__,-1,1>(3) <<
        (la - la_exp), (R - R_exp), (wb - wb_exp)).finished(),
        "assigning variable x");
      if (emit_transformed_parameters__) {
        out__.write(c);
        out__.write(h);
        out__.write(Omega_b);
        out__.write(Omega_c);
        out__.write(wr);
        out__.write(Omega_r);
        out__.write(lambda);
        out__.write(g1);
        out__.write(g2);
        out__.write(zstar);
        out__.write(faketheta);
        out__.write(y1);
        out__.write(dy1);
        out__.write(y2);
        out__.write(dy2);
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= 1; ++sym2__) {
            out__.write(S[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        out__.write(sol);
        out__.write(la);
        out__.write(R);
        out__.write(wb);
        out__.write(x);
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ H0 = DUMMY_VAR__;
      H0 = in__.read<local_scalar_t__>();
      out__.write(H0);
      local_scalar_t__ Omb = DUMMY_VAR__;
      Omb = in__.read<local_scalar_t__>();
      out__.write(Omb);
      local_scalar_t__ Om = DUMMY_VAR__;
      Om = in__.read<local_scalar_t__>();
      out__.write(Om);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"H0", "Omb", "Om", "c", "h",
      "Omega_b", "Omega_c", "wr", "Omega_r", "lambda", "g1", "g2", "zstar",
      "faketheta", "y1", "dy1", "y2", "dy2", "S", "sol", "la", "R", "wb",
      "x"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{static_cast<size_t>(6)}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{static_cast<size_t>(1), static_cast<size_t>(2)},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{static_cast<size_t>(3)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "H0");
    param_names__.emplace_back(std::string() + "Omb");
    param_names__.emplace_back(std::string() + "Om");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "c");
      param_names__.emplace_back(std::string() + "h");
      param_names__.emplace_back(std::string() + "Omega_b");
      param_names__.emplace_back(std::string() + "Omega_c");
      param_names__.emplace_back(std::string() + "wr");
      param_names__.emplace_back(std::string() + "Omega_r");
      param_names__.emplace_back(std::string() + "lambda");
      param_names__.emplace_back(std::string() + "g1");
      param_names__.emplace_back(std::string() + "g2");
      param_names__.emplace_back(std::string() + "zstar");
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "faketheta" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "y1");
      param_names__.emplace_back(std::string() + "dy1");
      param_names__.emplace_back(std::string() + "y2");
      param_names__.emplace_back(std::string() + "dy2");
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 1; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "S" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      param_names__.emplace_back(std::string() + "sol");
      param_names__.emplace_back(std::string() + "la");
      param_names__.emplace_back(std::string() + "R");
      param_names__.emplace_back(std::string() + "wb");
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "x" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "H0");
    param_names__.emplace_back(std::string() + "Omb");
    param_names__.emplace_back(std::string() + "Om");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "c");
      param_names__.emplace_back(std::string() + "h");
      param_names__.emplace_back(std::string() + "Omega_b");
      param_names__.emplace_back(std::string() + "Omega_c");
      param_names__.emplace_back(std::string() + "wr");
      param_names__.emplace_back(std::string() + "Omega_r");
      param_names__.emplace_back(std::string() + "lambda");
      param_names__.emplace_back(std::string() + "g1");
      param_names__.emplace_back(std::string() + "g2");
      param_names__.emplace_back(std::string() + "zstar");
      for (int sym1__ = 1; sym1__ <= 6; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "faketheta" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "y1");
      param_names__.emplace_back(std::string() + "dy1");
      param_names__.emplace_back(std::string() + "y2");
      param_names__.emplace_back(std::string() + "dy2");
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 1; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "S" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      param_names__.emplace_back(std::string() + "sol");
      param_names__.emplace_back(std::string() + "la");
      param_names__.emplace_back(std::string() + "R");
      param_names__.emplace_back(std::string() + "wb");
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "x" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"H0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"Omb\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"Om\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"c\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"h\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"Omega_b\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"Omega_c\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"wr\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"Omega_r\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"g1\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"g2\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"zstar\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"faketheta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(6) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"y1\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"dy1\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"y2\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"dy2\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"S\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"sol\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"la\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"R\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"wb\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"x\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(3) + "},\"block\":\"transformed_parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"H0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"Omb\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"Om\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"c\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"h\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"Omega_b\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"Omega_c\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"wr\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"Omega_r\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"g1\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"g2\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"zstar\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"faketheta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(6) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"y1\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"dy1\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"y2\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"dy2\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"S\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"sol\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"la\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"R\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"wb\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"x\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(3) + "},\"block\":\"transformed_parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((1 + 1) + 1);
      const size_t num_transformed = emit_transformed_parameters * 
  ((((((((((((((((((((1 + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 6) +
             1) + 1) + 1) + 1) + (1 * 2)) + 1) + 1) + 1) + 1) + 3);
      const size_t num_gen_quantities = emit_generated_quantities * 0;
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      std::vector<int> params_i;
      vars = Eigen::Matrix<double, Eigen::Dynamic, 1>::Constant(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((1 + 1) + 1);
      const size_t num_transformed = emit_transformed_parameters * 
  ((((((((((((((((((((1 + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 6) +
             1) + 1) + 1) + 1) + (1 * 2)) + 1) + 1) + 1) + 1) + 3);
      const size_t num_gen_quantities = emit_generated_quantities * 0;
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      vars = std::vector<double>(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 3> names__{"H0", "Omb", "Om"};
      const std::array<Eigen::Index, 3> constrain_param_sizes__{1, 1, 1};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
     }; } using stan_model = cmb4_2_model_namespace::cmb4_2_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return cmb4_2_model_namespace::profiles__;
}

#endif


