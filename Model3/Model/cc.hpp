
// Code generated by stanc v2.31.0
#include <stan/model/model_header.hpp>
namespace cc_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 44> locations_array__ = 
{" (found before start of program)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cc.stan', line 55, column 4 to column 12)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cc.stan', line 56, column 4 to column 12)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cc.stan', line 64, column 2 to column 33)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cc.stan', line 65, column 3 to column 15)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cc.stan', line 72, column 4 to column 18)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cc.stan', line 73, column 4 to column 18)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cc.stan', line 84, column 4 to column 27)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cc.stan', line 94, column 2 to column 24)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cc.stan', line 66, column 3 to column 49)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cc.stan', line 75, column 4 to column 15)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cc.stan', line 76, column 4 to column 17)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cc.stan', line 79, column 4 to column 64)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cc.stan', line 80, column 4 to column 15)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cc.stan', line 86, column 4 to column 55)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cc.stan', line 99, column 4 to column 28)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cc.stan', line 97, column 17 to line 100, column 3)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cc.stan', line 97, column 1 to line 100, column 3)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cc.stan', line 109, column 2 to column 24)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cc.stan', line 110, column 2 to column 22)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cc.stan', line 118, column 1 to column 28)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cc.stan', line 40, column 2 to column 19)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cc.stan', line 41, column 2 to column 19)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cc.stan', line 42, column 2 to column 23)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cc.stan', line 49, column 2 to column 20)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cc.stan', line 50, column 2 to column 19)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cc.stan', line 7, column 4 to column 23)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cc.stan', line 8, column 4 to column 24)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cc.stan', line 9, column 4 to column 31)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cc.stan', line 11, column 4 to column 18)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cc.stan', line 13, column 4 to column 23)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cc.stan', line 14, column 4 to column 23)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cc.stan', line 16, column 4 to column 61)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cc.stan', line 17, column 4 to column 30)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cc.stan', line 19, column 4 to column 15)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cc.stan', line 4, column 90 to line 21, column 1)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cc.stan', line 24, column 4 to column 23)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cc.stan', line 25, column 4 to column 23)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cc.stan', line 26, column 4 to column 22)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cc.stan', line 28, column 4 to column 28)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cc.stan', line 29, column 4 to column 22)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cc.stan', line 30, column 4 to column 26)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cc.stan', line 31, column 4 to column 71)",
 " (in '/Users/guilhermegarcia/Desktop/IASTRO_Estagio/Model3/Model/cc.stan', line 23, column 29 to line 32, column 1)"};

struct rs_functor__ {
  template <typename T0__,
            stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
  stan::promote_args_t<T0__>
  operator()(const std::vector<T0__>& theta, std::ostream* pstream__) const;
};
struct residual_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            typename T4__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_col_vector<T1__>,
                                stan::is_vt_not_complex<T1__>,
                                stan::is_col_vector<T2__>,
                                stan::is_vt_not_complex<T2__>,
                                stan::is_stan_scalar<T3__>,
                                stan::is_stan_scalar<T4__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>, stan::base_type_t<T2__>,
                       T3__, T4__>, -1, 1>
  operator()(const T0__& z, const T1__& state, const T2__& state_div,
             const T3__& lambda, const std::vector<T4__>& theta,
             std::ostream* pstream__) const;
};
struct residual_variadic3_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            typename T4__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_col_vector<T1__>,
                                stan::is_vt_not_complex<T1__>,
                                stan::is_col_vector<T2__>,
                                stan::is_vt_not_complex<T2__>,
                                stan::is_stan_scalar<T3__>,
                                stan::is_stan_scalar<T4__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>, stan::base_type_t<T2__>,
                       T3__, T4__>, -1, 1>
  operator()(const T0__& z, const T1__& state, const T2__& state_div,
             std::ostream* pstream__, const T3__& lambda,
             const std::vector<T4__>& theta) const;
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>, stan::base_type_t<T2__>,
                     T3__, T4__>, -1, 1>
  residual(const T0__& z, const T1__& state_arg__,
           const T2__& state_div_arg__, const T3__& lambda,
           const std::vector<T4__>& theta, std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<T0__, stan::base_type_t<T1__>,
                                 stan::base_type_t<T2__>, T3__, T4__>;
    int current_statement__ = 0; 
    const auto& state = stan::math::to_ref(state_arg__);
    const auto& state_div = stan::math::to_ref(state_div_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ E = DUMMY_VAR__;
      current_statement__ = 26;
      E = stan::model::rvalue(state, "state", stan::model::index_uni(1));
      local_scalar_t__ Int = DUMMY_VAR__;
      current_statement__ = 27;
      Int = stan::model::rvalue(state, "state", stan::model::index_uni(2));
      local_scalar_t__ divInt = DUMMY_VAR__;
      current_statement__ = 28;
      divInt = stan::model::rvalue(state_div, "state_div",
                 stan::model::index_uni(2));
      Eigen::Matrix<local_scalar_t__, -1, 1> res =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__);
      local_scalar_t__ H0 = DUMMY_VAR__;
      current_statement__ = 30;
      H0 = stan::model::rvalue(theta, "theta", stan::model::index_uni(1));
      local_scalar_t__ Om = DUMMY_VAR__;
      current_statement__ = 31;
      Om = stan::model::rvalue(theta, "theta", stan::model::index_uni(2));
      current_statement__ = 32;
      stan::model::assign(res,
        (((stan::math::pow(E, 2) - (2 * lambda)) *
           stan::math::exp((lambda / stan::math::pow(E, 2)))) -
          (Om * stan::math::pow((1 + z), 3))),
        "assigning variable res", stan::model::index_uni(1));
      current_statement__ = 33;
      stan::model::assign(res, (divInt - (1.0 / E)),
        "assigning variable res", stan::model::index_uni(2));
      current_statement__ = 34;
      return res;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__,
          stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
  stan::promote_args_t<T0__>
  rs(const std::vector<T0__>& theta, std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ H0 = DUMMY_VAR__;
      current_statement__ = 36;
      H0 = stan::model::rvalue(theta, "theta", stan::model::index_uni(1));
      local_scalar_t__ Om = DUMMY_VAR__;
      current_statement__ = 37;
      Om = stan::model::rvalue(theta, "theta", stan::model::index_uni(2));
      local_scalar_t__ M = DUMMY_VAR__;
      current_statement__ = 38;
      M = stan::model::rvalue(theta, "theta", stan::model::index_uni(3));
      local_scalar_t__ wm = DUMMY_VAR__;
      current_statement__ = 39;
      wm = (Om * stan::math::pow((H0 / 100), 2));
      local_scalar_t__ wb = DUMMY_VAR__;
      current_statement__ = 40;
      wb = 0.02226;
      local_scalar_t__ wn = DUMMY_VAR__;
      current_statement__ = 41;
      wn = (0.0107 * 0.06);
      current_statement__ = 42;
      return ((55.154 *
                stan::math::exp((-72.3 * stan::math::pow((wn + 0.0006), 2))))
               /
               (stan::math::pow(wm, 0.25351) * stan::math::pow(wb, 0.12807)));
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, stan::require_all_t<stan::is_stan_scalar<T0__>>*>
stan::promote_args_t<T0__>
rs_functor__::operator()(const std::vector<T0__>& theta,
                         std::ostream* pstream__)  const
{
  return rs(theta, pstream__);
}

template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>>*>
Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>, stan::base_type_t<T2__>,
                     T3__, T4__>, -1, 1>
residual_functor__::operator()(const T0__& z, const T1__& state,
                               const T2__& state_div, const T3__& lambda,
                               const std::vector<T4__>& theta,
                               std::ostream* pstream__)  const
{
  return residual(z, state, state_div, lambda, theta, pstream__);
}

template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>>*>
Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>, stan::base_type_t<T2__>,
                     T3__, T4__>, -1, 1>
residual_variadic3_functor__::operator()(const T0__& z, const T1__& state,
                                         const T2__& state_div,
                                         std::ostream* pstream__,
                                         const T3__& lambda,
                                         const std::vector<T4__>& theta) 
const
{
  return residual(z, state, state_div, lambda, theta, pstream__);
}

 class cc_model final : public model_base_crtp<cc_model> {

 private:
  std::vector<double> z;
  std::vector<double> H;
  std::vector<double> error;
  std::vector<double> x_r;
  std::vector<int> x_i; 
  
 
 public:
  ~cc_model() { }
  
  inline std::string model_name() const final { return "cc_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.31.0", "stancflags = "};
  }
  
  
  cc_model(stan::io::var_context& context__, unsigned int random_seed__ = 0,
           std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "cc_model_namespace::cc_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 21;
      context__.validate_dims("data initialization","z","double",
           std::vector<size_t>{static_cast<size_t>(32)});
      z = std::vector<double>(32, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 21;
      z = context__.vals_r("z");
      current_statement__ = 22;
      context__.validate_dims("data initialization","H","double",
           std::vector<size_t>{static_cast<size_t>(32)});
      H = std::vector<double>(32, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 22;
      H = context__.vals_r("H");
      current_statement__ = 23;
      context__.validate_dims("data initialization","error","double",
           std::vector<size_t>{static_cast<size_t>(32)});
      error = 
        std::vector<double>(32, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 23;
      error = context__.vals_r("error");
      current_statement__ = 24;
      x_r = std::vector<double>(0, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 25;
      x_i = std::vector<int>(0, std::numeric_limits<int>::min());
      
      
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "cc_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ Om = DUMMY_VAR__;
      current_statement__ = 1;
      Om = in__.template read<local_scalar_t__>();
      local_scalar_t__ H0 = DUMMY_VAR__;
      current_statement__ = 2;
      H0 = in__.template read<local_scalar_t__>();
      std::vector<local_scalar_t__> theta =
         std::vector<local_scalar_t__>(2, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(theta, std::vector<local_scalar_t__>{H0, Om},
        "assigning variable theta");
      local_scalar_t__ lambda = DUMMY_VAR__;
      current_statement__ = 9;
      lambda = (0.5 +
                 stan::math::lambert_w0((-Om / (2 * stan::math::exp(0.5)))));
      Eigen::Matrix<local_scalar_t__, -1, 1> yy0 =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__, -1, 1> yp0 =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__);
      current_statement__ = 10;
      stan::model::assign(yy0, 1,
        "assigning variable yy0", stan::model::index_uni(1));
      current_statement__ = 11;
      stan::model::assign(yy0, 0.0,
        "assigning variable yy0", stan::model::index_uni(2));
      current_statement__ = 12;
      stan::model::assign(yp0,
        ((((1 / (2 * stan::math::exp(lambda))) * 3) * Om) /
          ((1 - lambda) + (2 * stan::math::pow(lambda, 2)))),
        "assigning variable yp0", stan::model::index_uni(1));
      current_statement__ = 13;
      stan::model::assign(yp0, 1,
        "assigning variable yp0", stan::model::index_uni(2));
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> S =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(32, 
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__));
      current_statement__ = 14;
      stan::model::assign(S,
        stan::math::dae(residual_variadic3_functor__(), yy0, yp0, 0.0, z,
          pstream__, lambda, theta), "assigning variable S");
      std::vector<local_scalar_t__> H_theo =
         std::vector<local_scalar_t__>(32, DUMMY_VAR__);
      current_statement__ = 17;
      for (int i = 1; i <= 32; ++i) {
        current_statement__ = 15;
        stan::model::assign(H_theo,
          (H0 *
            stan::model::rvalue(S, "S",
              stan::model::index_uni(i), stan::model::index_uni(1))),
          "assigning variable H_theo", stan::model::index_uni(i));
      }
      {
        current_statement__ = 18;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(Om, 0.3, 0.1));
        current_statement__ = 19;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(H0, 70, 10));
        current_statement__ = 20;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(H_theo, H, error));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "cc_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double Om = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      Om = in__.template read<local_scalar_t__>();
      double H0 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      H0 = in__.template read<local_scalar_t__>();
      std::vector<double> theta =
         std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
      double lambda = std::numeric_limits<double>::quiet_NaN();
      Eigen::Matrix<double, -1, 1> yy0 =
         Eigen::Matrix<double, -1, 1>::Constant(2,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> yp0 =
         Eigen::Matrix<double, -1, 1>::Constant(2,
           std::numeric_limits<double>::quiet_NaN());
      std::vector<Eigen::Matrix<double, -1, 1>> S =
         std::vector<Eigen::Matrix<double, -1, 1>>(32, 
           Eigen::Matrix<double, -1, 1>::Constant(2,
             std::numeric_limits<double>::quiet_NaN()));
      std::vector<double> H_theo =
         std::vector<double>(32, std::numeric_limits<double>::quiet_NaN());
      out__.write(Om);
      out__.write(H0);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 3;
      stan::model::assign(theta, std::vector<local_scalar_t__>{H0, Om},
        "assigning variable theta");
      current_statement__ = 9;
      lambda = (0.5 +
                 stan::math::lambert_w0((-Om / (2 * stan::math::exp(0.5)))));
      current_statement__ = 10;
      stan::model::assign(yy0, 1,
        "assigning variable yy0", stan::model::index_uni(1));
      current_statement__ = 11;
      stan::model::assign(yy0, 0.0,
        "assigning variable yy0", stan::model::index_uni(2));
      current_statement__ = 12;
      stan::model::assign(yp0,
        ((((1 / (2 * stan::math::exp(lambda))) * 3) * Om) /
          ((1 - lambda) + (2 * stan::math::pow(lambda, 2)))),
        "assigning variable yp0", stan::model::index_uni(1));
      current_statement__ = 13;
      stan::model::assign(yp0, 1,
        "assigning variable yp0", stan::model::index_uni(2));
      current_statement__ = 14;
      stan::model::assign(S,
        stan::math::dae(residual_variadic3_functor__(), yy0, yp0, 0.0, z,
          pstream__, lambda, theta), "assigning variable S");
      current_statement__ = 17;
      for (int i = 1; i <= 32; ++i) {
        current_statement__ = 15;
        stan::model::assign(H_theo,
          (H0 *
            stan::model::rvalue(S, "S",
              stan::model::index_uni(i), stan::model::index_uni(1))),
          "assigning variable H_theo", stan::model::index_uni(i));
      }
      if (emit_transformed_parameters__) {
        out__.write(theta);
        out__.write(lambda);
        out__.write(yy0);
        out__.write(yp0);
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= 32; ++sym2__) {
            out__.write(S[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        out__.write(H_theo);
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ Om = DUMMY_VAR__;
      Om = in__.read<local_scalar_t__>();
      out__.write(Om);
      local_scalar_t__ H0 = DUMMY_VAR__;
      H0 = in__.read<local_scalar_t__>();
      out__.write(H0);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"Om", "H0", "theta", "lambda", "yy0",
      "yp0", "S", "H_theo"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{static_cast<size_t>(2)},
      std::vector<size_t>{}, std::vector<size_t>{static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(32), static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(32)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "Om");
    param_names__.emplace_back(std::string() + "H0");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "theta" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "lambda");
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "yy0" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "yp0" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 32; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "S" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 32; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "H_theo" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "Om");
    param_names__.emplace_back(std::string() + "H0");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "theta" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "lambda");
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "yy0" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "yp0" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 32; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "S" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 32; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "H_theo" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"Om\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"H0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"yy0\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"},{\"name\":\"yp0\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"},{\"name\":\"S\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(32) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"H_theo\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(32) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"Om\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"H0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(2) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"yy0\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"},{\"name\":\"yp0\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"},{\"name\":\"S\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(32) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"H_theo\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(32) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (1 + 1);
      const size_t num_transformed = emit_transformed_parameters * 
  (((((2 + 1) + 2) + 2) + (32 * 2)) + 32);
      const size_t num_gen_quantities = emit_generated_quantities * 0;
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      std::vector<int> params_i;
      vars = Eigen::Matrix<double, Eigen::Dynamic, 1>::Constant(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (1 + 1);
      const size_t num_transformed = emit_transformed_parameters * 
  (((((2 + 1) + 2) + 2) + (32 * 2)) + 32);
      const size_t num_gen_quantities = emit_generated_quantities * 0;
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      vars = std::vector<double>(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 2> names__{"Om", "H0"};
      const std::array<Eigen::Index, 2> constrain_param_sizes__{1, 1};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
     }; } using stan_model = cc_model_namespace::cc_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return cc_model_namespace::profiles__;
}

#endif


